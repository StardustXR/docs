/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var f=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var m=Object.prototype.hasOwnProperty;var w=(a,e)=>{for(var t in e)f(a,t,{get:e[t],enumerable:!0})},k=(a,e,t,c)=>{if(e&&typeof e=="object"||typeof e=="function")for(let i of g(e))!m.call(a,i)&&i!==t&&f(a,i,{get:()=>e[i],enumerable:!(c=p(e,i))||c.enumerable});return a};var u=a=>k(f({},"__esModule",{value:!0}),a);var v={};w(v,{default:()=>o});module.exports=u(v);var r=require("obsidian"),o=class extends r.Plugin{async onload(){this.addCommand({id:"format-bold",name:"Format Bold",hotkeys:[{modifiers:["Mod"],key:"b"}],checkCallback:e=>{let t=this.app.workspace.getActiveViewOfType(r.MarkdownView);return t&&t.getViewType()==="canvas"&&t.isEditing?(e||this.formatText("**"),!0):!1}}),this.addCommand({id:"format-italic",name:"Format Italic",hotkeys:[{modifiers:["Mod"],key:"i"}],checkCallback:e=>{let t=this.app.workspace.getActiveViewOfType(r.MarkdownView);return t&&t.getViewType()==="canvas"&&t.isEditing?(e||this.formatText("*"),!0):!1}}),this.registerDomEvent(document,"keydown",e=>{if((e.ctrlKey||e.metaKey)&&(e.key==="b"||e.key==="i")){let t=this.app.workspace.getActiveViewOfType(r.MarkdownView);t&&t.getViewType()==="canvas"&&t.isEditing&&(e.preventDefault(),this.formatText(e.key==="b"?"**":"*"))}})}formatText(e){let t=this.app.workspace.getActiveViewOfType(r.MarkdownView);if(!t||t.getViewType()!=="canvas")return;let c=t;if(!c.isEditing)return;let i=c.editor;if(!i)return;let l=i.getSelection();if(l){let s=l.trim();if(s.startsWith(e)&&s.endsWith(e)){let n=s.slice(e.length,-e.length);e==="**"&&(n.startsWith("*")||n.endsWith("*"))||e==="*"&&(n.startsWith("**")||n.endsWith("**")),i.replaceSelection(n)}else i.replaceSelection(`${e}${l}${e}`)}else{let s=i.getCursor(),h=i.getLine(s.line),n=h.slice(0,s.ch),d=h.slice(s.ch);n.endsWith(e)&&d.startsWith(e)?(i.replaceRange("",{line:s.line,ch:s.ch-e.length},{line:s.line,ch:s.ch+e.length}),i.setCursor({line:s.line,ch:s.ch-e.length})):(i.replaceRange(`${e}${e}`,s),i.setCursor({line:s.line,ch:s.ch+e.length}))}}};
